package com.google.jenkins.plugins.credentials.oauth.thirdparty;

import com.google.jenkins.plugins.credentials.oauth.OAuth2Token;

import com.cloudbees.plugins.credentials.CredentialsDescriptor;
import com.cloudbees.plugins.credentials.CredentialsScope;
import com.cloudbees.plugins.credentials.domains.DomainRequirement;
import com.cloudbees.plugins.credentials.domains.DomainSpecification.Result;

import org.kohsuke.stapler.DataBoundConstructor;

import java.util.ArrayList;
import java.util.List;

import hudson.util.Secret;

/**
 * TODO: Insert description here. (generated by elibixby)
 */
public class OAuth3LOToken implements OAuth2Token<OAuth3LOScopeRequirement> {
  
  
  private final Secret token;
  private final OAuth3LOScopeSpecification scopeSpec;
  
  @DataBoundConstructor
  public OAuth3LOToken(String rawtoken, OAuth3LOScopeRequirement scopeReqs) {
    this.token = Secret.fromString(rawtoken);
    this.scopeSpec = new OAuth3LOScopeSpecification(scopeReqs.getScopes(), scopeReqs.getProvider());
  }

  /* (non-Javadoc)
   * @see com.cloudbees.plugins.credentials.Credentials#getDescriptor()
   */
  @Override
  public CredentialsDescriptor getDescriptor() {
    // TODO(elibixby): Auto-generated method stub
    return null;
  }

  /* (non-Javadoc)
   * @see com.cloudbees.plugins.credentials.Credentials#getScope()
   */
  @Override
  public CredentialsScope getScope() {
    return CredentialsScope.USER;
  }

  /* (non-Javadoc)
   * @see com.cloudbees.plugins.credentials.domains.DomainRestrictedCredentials#matches(java.util.List)
   */
  @Override
  public boolean matches(List<DomainRequirement> arg0) {
    for(DomainRequirement req : arg0){
      if(scopeSpec.test(req).equals(Result.NEGATIVE)){
        return false;
      }
    }
    return true;
  }

  /* (non-Javadoc)
   * @see com.google.jenkins.plugins.credentials.oauth.OAuth2Credentials#getAccessToken(com.google.jenkins.plugins.credentials.oauth.OAuth2ScopeRequirement)
   */
  @Override
  public Secret getAccessToken(OAuth3LOScopeRequirement requirement) {
    ArrayList<DomainRequirement> reqs = new ArrayList<DomainRequirement>();
    reqs.add(requirement);
    if(this.matches(reqs)){
      return this.token;
    } else {
      return null;
    }
  }

}
