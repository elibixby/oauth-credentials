package com.google.jenkins.plugins.credentials.oauth.thirdparty;


import com.google.jenkins.plugins.credentials.oauth.OAuth2ScopeRequirement;
import com.google.jenkins.plugins.credentials.oauth.OAuth2Token;

import com.cloudbees.plugins.credentials.CredentialsScope;
import com.cloudbees.plugins.credentials.domains.DomainCredentials;
import com.cloudbees.plugins.credentials.domains.DomainRequirement;
import com.cloudbees.plugins.credentials.domains.DomainRestrictedCredentials;
import com.cloudbees.plugins.credentials.impl.BaseStandardCredentials;

import org.apache.oltu.oauth2.client.OAuthClient;
import org.apache.oltu.oauth2.client.URLConnectionClient;
import org.apache.oltu.oauth2.client.request.OAuthClientRequest;
import org.apache.oltu.oauth2.client.request.OAuthClientRequest.AuthenticationRequestBuilder;
import org.apache.oltu.oauth2.client.response.OAuthAuthzResponse;
import org.apache.oltu.oauth2.common.OAuthProviderType;
import org.apache.oltu.oauth2.common.exception.OAuthSystemException;
import org.apache.oltu.oauth2.common.message.types.GrantType;
import org.kohsuke.stapler.DataBoundConstructor;

import java.util.ArrayList;
import java.util.List;

import hudson.util.Secret;

import javax.annotation.Nullable;

import edu.umd.cs.findbugs.annotations.NonNull;
import edu.umd.cs.findbugs.annotations.CheckForNull;
import hudson.Extension;

/**
 * TODO: Insert description here. (generated by elibixby)
 */
@Extension
public class ClientCredentials extends BaseStandardCredentials implements DomainRestrictedCredentials{
  
  private static final String DEFAULT_REDIRECT_URI =  "/default/redirect/uri";

  @NonNull
  private final String clientId;
  @NonNull
  private final Secret clientSecret;
  @NonNull
  private final OAuthProviderType provider;
  @NonNull
  private final String redirectURI;
  
 
  
  
  
  
  @DataBoundConstructor
  public ClientCredentials(String id, String description, @CheckForNull String clientId, @CheckForNull String clientSecret,@CheckForNull OAuthProviderType provider, @Nullable String redirectURI) {
    super(CredentialsScope.SYSTEM, id, description);
    this.clientId = clientId;
    this.clientSecret = Secret.fromString(clientSecret);
    this.provider = provider;  
    this.redirectURI = redirectURI != null ? redirectURI : DEFAULT_REDIRECT_URI;
  }
  
  
  public OAuthClientRequest makeRequest(OAuth3LOScopeRequirement scopeReqs) throws OAuthSystemException{
    ArrayList<DomainRequirement> l = new ArrayList<DomainRequirement>();
    l.add(scopeReqs);
    if(!this.matches(l)){
      return null;
    }
    AuthenticationRequestBuilder req = OAuthClientRequest
        .authorizationProvider(provider)
        .setRedirectURI(redirectURI)
        .setClientId(clientId);
    for(String scope : scopeReqs.getScopes()){
      req.setScope(scope);
    }
    return req.buildQueryMessage();
  }
  
  public OAuth3LOToken getToken(OAuthAuthzResponse oar) throws OAuthSystemException{
    OAuthClientRequest request = OAuthClientRequest
        .tokenProvider(provider)
        .setGrantType(GrantType.AUTHORIZATION_CODE)
        .setClientId(clientId)
        .setClientSecret(Secret.toString(clientSecret))
        .setRedirectURI(redirectURI)
        .setCode(oar.getCode())
        .buildQueryMessage();
    
    OAuthClient oAuthClient = new OAuthClient(new URLConnectionClient());
    GitHubTokenResponse oAuthResponse = oAuthClient.accessToken(request, GitHubTokenResponse.class)
    
  }


  /* (non-Javadoc)
   * @see com.cloudbees.plugins.credentials.domains.DomainRestrictedCredentials#matches(java.util.List)
   */
  @Override
  public boolean matches(List<DomainRequirement> arg0) {
    for(DomainRequirement req : arg0){
      if (!(req instanceof OAuth3LOScopeRequirement)){
        return false;
      } else {
        return ((OAuth3LOScopeRequirement)req).getProvider().equals(this.provider)); 
      }
    }
  }
  
  
  
  
  
  
}
